/*  Time Complexity
    Build Tree	O(n)
    Update	O(log n)
    Range Query	O(log n)
*/

class NumArray {
private:
    vector<int> tree;
    int n;

    void BUILD(int Node, int left, int right, vector<int>& nums) {
        if (left == right) {
            tree[Node] = nums[left];
        } else {
            int mid = (left + right) >> 1;
            BUILD(Node << 1, left, mid, nums);
            BUILD((Node << 1) + 1, mid + 1, right, nums);
            tree[Node] = tree[Node << 1] + tree[(Node << 1) + 1];
        }
    }

    void UPDATE(int Node, int left, int right, int pos, int val) {
        if (left == right) {
            tree[Node] = val;
            return;
        }

        int mid = (left + right) >> 1;

        if (pos <= mid)
            UPDATE(Node << 1, left, mid, pos, val);
        else
            UPDATE((Node << 1) + 1, mid + 1, right, pos, val);

        tree[Node] = tree[Node << 1] + tree[(Node << 1) + 1];
    }

    int QUERY(int Node, int left, int right, int leftquery, int rightquery) {
        if (right < leftquery || left > rightquery)
            return 0;

        if (left >= leftquery && right <= rightquery)
            return tree[Node];

        int mid = (left + right) >> 1;
        int leftval = QUERY(Node << 1, left, mid, leftquery, rightquery);
        int rightval = QUERY((Node << 1) + 1, mid + 1, right, leftquery, rightquery);

        return leftval + rightval;
    }

public:
    NumArray(vector<int>& nums) {
        n = nums.size();
        tree.resize(4 * n);
        BUILD(1, 0, n - 1, nums);
    }

    void update(int index, int val) {
        UPDATE(1, 0, n - 1, index, val);
    }

    int sumRange(int left, int right) {
        return QUERY(1, 0, n - 1, left, right);
    }
};


/**
 * Your NumArray object will be instantiated and called as such:
 * NumArray* obj = new NumArray(nums);
 * obj->update(index,val);
 * int param_2 = obj->sumRange(left,right);
 */
