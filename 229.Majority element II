//cpp
//using hashmap
//better approach
class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) {
        vector<int>ls;
        map<int,int>mpp;
        int mm=(int)(nums.size()/3)+1;
        for(int i=0;i<nums.size();i++)
        {
            mpp[nums[i]]++;
            if(mpp[nums[i]]==mm)
            {
                ls.push_back(nums[i]);
            }
            if(ls.size()==2)break;
        }
        return ls;
    }
};

//optimal solution using moore's voting Algorithm
//cpp

class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) {
        int ele1=INT_MIN,ele2=INT_MIN;
        int cnt1=0,cnt2=0;
        for(int i=0;i<nums.size();i++)
        {
            if(cnt1==0&&nums[i]!=ele2)
            {
                cnt1++;
                ele1=nums[i];
            }
            else if(cnt2==0&&nums[i]!=ele1)
            {
                cnt2++;
                ele2=nums[i];
            }
            else if(ele1==nums[i])cnt1++;
            else if(ele2==nums[i])cnt2++;
            else
            {
                cnt1--;
                cnt2--;

            }
        }
        vector<int>ls;
        int cnt3=0,cnt4=0;
        for(int i=0;i<nums.size();i++)
        {
            if(ele1==nums[i])cnt3++;
            if(ele2==nums[i])cnt4++;

        }
        int mini=(int)(nums.size()/3)+1;
        if(cnt3>=mini)ls.push_back(ele1);
        if(cnt4>=mini)ls.push_back(ele2);
        return ls;
    }
};