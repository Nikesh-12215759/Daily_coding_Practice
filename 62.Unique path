//brute Solution TC-->O(exp^n)
int countPaths(int i,int j,int n,int m)
{
  if(i==(n-1)&&j==(m-1))return 1;
  if(i>=n||j>=m)return 0;
  else return countPaths(i+1,j)+countPaths(i,j+1);
}

//better Solution
//TC-->O(n*m)
//sc--> ~ O(n*m) 
int countPaths(int i,int j,int n,int m,vector<vector<int>>&dp)
{
  if(i==(n-1)&&j==(m-1))return 1;
  if(i>=n||j>=m)return 0;
  if(dp[i][j]!=-1)return dp[i][j];
  else return dp[i][j]=countPaths(i+1,j,dp)+countPaths(i,j+1,dp);
}

//most optimal solution using combination method 


class Solution {
public:
    int uniquePaths(int m, int n) {
        double res=1;
        int N=m+n-2;
        int r=m-1;
        for(int i=1;i<=r;i++)
        {
            res=res*(N-r+i)/i;
        }
        return (int)res;
    }
};

